#!/bin/bash

RETURN=-1
SORTING=0
function CHANGESORT(){

	SORTMODE=$1

	if [ $SORTMODE = 'sort_name' ]; then
	SORTING=0
	fi
	if [ $SORTMODE = 'sort_time' ]; then
	SORTING=1
	fi
	if [ $SORTMODE = 'sort_size' ]; then
	SORTING=2
	fi

}

function VERIFY(){

	FILE=$1

#File Does not Exist
	if [ ! -f $FILE ]; then
	RETURN=0
	fi

#File Exists
	if [ -f $FILE ]; then
	RETURN=1
	fi

#File is Directory
	if [ -d $FILE ]; then
	RETURN=2
	fi
}

function COMMAND(){

SELECT=$1
ARGUMENT1=$2
ARGUMENT2=$3

case ${SELECT,,} in

author)
	echo 'Wong, Oscar'
	;;

type)
#Execute if $2 is File
#Do not execute if $2 is directory or does not exist

		echo "The UNIX Command to show a file's content is: cat $ARGUMENT1"
		echo "Where $ARGUMENT1 is a valid filename"

	VERIFY $ARGUMENT1

	case $RETURN in
	0)
	echo "$ARGUMENT1 does not exist"
	echo "Function Not Executed"
	;;
	1)
	cat $ARGUMENT1 2> /dev/null
			if [ $? == 0 ]; then

				echo "File successfully shown"

			else 

				echo "An error has occured. File not successfully shown"

			fi	
	;;
	2)
	echo "$ARGUMENT1 is a directory"
	echo "Function Not Executed"
	;;
	esac

;;

copy)
#Execute if ARGUMENT1 exists
#Do not execute if ARGUMENT1 does not exist
#Recursive Copy if ARGUMENT1 is a directory
#Do not execute if ARGUMENT 2 is a file



		echo "The UNIX Command to copy a file is: cp $ARGUMENT1 $ARGUMENT2"
		echo "Where filename is a valid filename"
		echo "And copyname is the name of the copy"
		echo "The -r flag is added if $ARGUMENT1 is a directory to copy recursively"
		echo "If $ARGUMENT2 is a directory a copy of the file will be made in $ARGUMENT2"

	VERIFY $ARGUMENT2
 	if [ $RETURN != 1 ]; then

		VERIFY $ARGUMENT1

		case $RETURN in
		0)
		echo "$ARGUMENT1 does not exist"
		echo "Function Not Executed"
		;;
		1)
		cp $ARGUMENT1 $ARGUMENT2 2> /dev/null

			if [ $? == 0 ]; then

				echo "File successfully copied"

			else 

				echo "An error has occured. File not successfully copied"

			fi	
		;;
		2)
		cp -r $ARGUMENT1 $ARGUMENT2 2> /dev/null

			if [ $? == 0 ]; then

				echo "File successfully copied"

			else 

				echo "An error has occured. File not successfully copied"

			fi	
		;;
		esac

	else
	echo "$ARGUMENT2 is an existing file and will be overwritten"
	echo "Function Not Executed"
	fi
;;

copy!)
#Execute if ARGUMENT1 exists
#Do not execute if ARGUMENT1 does not exist
#Recursive Copy if ARGUMENT1 is a directory

		echo "The UNIX Command to copy a file is: cp $ARGUMENT1 $ARGUMENT2"
		echo "Where filename is a valid filename"
		echo "And copyname is the name of the copy"
		echo "The -r flag is added if $ARGUMENT1 is a directory to copy recursively"
		echo "If $ARGUMENT2 is a directory a copy of the file will be made in $ARGUMENT2"


		VERIFY $ARGUMENT1

		case $RETURN in
		0)
		echo "$ARGUMENT1 does not exist"
		echo "Function Not Executed"
		;;
		1)
		cp -f $ARGUMENT1 $ARGUMENT2 2> /dev/null

			if [ $? == 0 ]; then

				echo "File successfully copied"

			else 

				echo "An error has occured. File not successfully copied"

			fi	
		;;
		2)
		cp -rf $ARGUMENT1 $ARGUMENT2 2> /dev/null

			if [ $? == 0 ]; then

				echo "File successfully copied"

			else 

				echo "An error has occured. File not successfully copied"

			fi	
		;;
		esac

;;

ren)
#Do not execute if file does not exist
#Execute if file exists
#Do not execute if file 2 exists

		echo "The UNIX Command to rename a file is: mv $ARGUMENT1 $ARGUMENT2"
		echo "Where $ARGUMENT1 is a valid filename"
		echo "And $ARGUMENT2 is the new name of the file"

	VERIFY $ARGUMENT1

	if [ $RETURN == 0 ]; then

	echo "$ARGUMENT1 does not exist"
	echo "Function Not Executed"

	else

		VERIFY $ARGUMENT2

		case $RETURN in
		0)
		mv $ARGUMENT1 $ARGUMENT2 2> /dev/null
			if [ $? == 0 ]; then

				echo "File successfully renamed"

			else 

				echo "An error has occured. File not successfully renamed"

			fi	
		;;
		1)
		echo "File 2 will be overwritten"
		echo "Function not executed"
		;;
		2)
		echo "File 2 is a directory, and this will not rename the file"
		echo "Function not executed"
		;;
		esac
	fi
;;

ren!)
#Do not execute if file does not exist
#Execute if file exists


		echo "The UNIX Command to rename a file is: mv $ARGUMENT1 $ARGUMENT2"
		echo "Where $ARGUMENT1 is a valid filename"
		echo "And $ARGUMENT2 is the new name of the file"

	VERIFY $ARGUMENT1

	if [ $RETURN == 0 ]; then

	echo "$ARGUMENT1 does not exist"
	echo "Function Not Executed"

	else

		VERIFY $ARGUMENT2

		case $RETURN in
		0)
		mv -f $ARGUMENT1 $ARGUMENT2 2> /dev/null
			if [ $? == 0 ]; then

				echo "File successfully renamed"

			else 

				echo "An error has occured. File not successfully renamed"

			fi	
		;;

		2)
		echo "File 2 is a directory, and this will not rename the file"
		echo "Function not executed"
		;;
		esac
	fi
;;

move)
#Do not execute if ARGUMENT1 is not a file
#Recursive Copy if ARGUMENT1 is a directory
#Do not execute if ARGUMENT2 is a file

		echo "The UNIX Command to move a file is: mv $ARGUMENT1 $ARGUMENT2"
		echo "Where $ARGUMENT1 is a valid filename"
		echo "And $ARGUMENT2 is a valid filepath"

	VERIFY $ARGUMENT2

	if [ $RETURN == 1 ]; then

	echo "$ARGUMENT2 is an existing file that will be overwritten"
	echo "Function not executed"

	else
		VERIFY $ARGUMENT1

		if [ $RETURN == 0 ]; then
		echo "$ARGUMENT1 does not exist"
		echo "Function Not Executed"
		else

		mv $ARGUMENT1 $ARGUMENT2 2> /dev/null

			if [ $? == 0 ]; then

				echo "File successfully moved"

			else 

				echo "An error has occured. File not successfully moved"

			fi	
		fi

	fi
;;

move!)
#Do not execute if ARGUMENT1 is not a file
#Recursive Copy if ARGUMENT1 is a directory

		echo "The UNIX Command to move a file is: mv $ARGUMENT1 $ARGUMENT2"
		echo "Where $ARGUMENT1 is a valid filename"
		echo "And $ARGUMENT2 is a valid filepath"



		VERIFY $ARGUMENT1

		if [ $RETURN == 0 ]; then
		echo "$ARGUMENT1 does not exist"
		echo "Function Not Executed"
		else

		mv -f $ARGUMENT1 $ARGUMENT2 2> /dev/null

			if [ $? == 0 ]; then

				echo "File successfully moved"

			else 

				echo "An error has occured. File not successfully moved"

			fi	
		fi

;;

del)
#Execute if file exists
#Do not execute if file does not exist
#Recursive Delete if File is a directory

		echo "The UNIX Command to delete a file is: rm $ARGUMENT1"
		echo "Where $ARGUMENT1 is a valid filename"
		echo "The -r flag is added if $ARGUMENT1 is a directory to delete recursively"

	VERIFY $ARGUMENT1

	case $RETURN in
	0)
	echo "$ARGUMENT1 does not exist"
	echo "Function Not Executed"
	;;
	1)
	rm $ARGUMENT1 > /dev/null
	echo "$ARGUMENT1 has been successfully removed"
	;;
	2)
	rm -r $ARGUMENT1 > /dev/null
	echo "$ARGUMENT1 has been successfully removed"
	;;
	esac
;;

whereami)

		echo "The UNIX Command to show the current directory is: pwd"

	pwd

;;

cd)


		echo "The UNIX Command to change directories is: cd $ARGUMENT1"
		echo "Where $ARGUMENT1 is a valid filepath"

VERIFY $ARGUMENT1

		if [ $RETURN != 2 ]; then
		echo "$ARGUMENT1 is not a directory"
		echo "Function Not Executed"
		else

		cd $ARGUMENT1 2> /dev/null

			if [ $? == 0 ]; then

				echo "Change directories successful"

			else 

				echo "An error has occured. Change directories not successful"

			fi	
		fi

;;

sort_name);;
sort_time);;
sort_size);;

*)
	echo "THIS IS THE HELP PAGE"
	echo "Use './dosutil author' to show the author's name"
	echo "Use './dosutil type filename' to show the contents of a file where filename is an existing file."
	echo "Use './dosutil copy filename copyname' to copy a file where filename is an existing file and copyname is the copy's name."
	echo "Use './dosutil ren filename newname' to rename a file to 'newname' where filename is an existing file."
	echo "Use './dosutil move filename filepath' to rename a file to filepath where filename is an existing file."
	echo "Use './dosutil del filename' to delete a file where filename is an existing file."
	echo "Use './dosutil help' to see the help page."
	echo "All other invalid parameters for the above commands will show the HELP page"

;;
esac

}

function LOOPING(){
	select SELECT in author type copy ren del move help copy! move! ren! whereami cd exit sort_name sort_time sort_size

		do

	if [ $SELECT == "exit" ]; then
		break
	fi


	if [ $SELECT == "sort_time" ]||[ $SELECT == "sort_name" ]||[ $SELECT == "sort_size" ]; then
		CHANGESORT $SELECT
	fi

		if [ $SELECT == "type" ] || [ $SELECT == "copy" ]|| [ $SELECT == "ren" ]|| [ $SELECT == "del" ]|| [ $SELECT == "move" ]|| [ $SELECT == "copy!" ]|| [ $SELECT == "move!" ]|| [ $SELECT == "ren!" ]|| [ $SELECT == "cd" ]; then
		
			case $SORTING in

				0)
					FOLDER=$(ls)
				;;

				1) 
					FOLDER=$(ls -t)
				;;

				2)
					FOLDER=$(ls -S)

				;;
			esac

			select ARGUMENT1 in $FOLDER

			do 

			if [ $SELECT == "copy" ]|| [ $SELECT == "ren" ] || [ $SELECT == "move" ]|| [ $SELECT == "copy!" ]|| [ $SELECT == "move!" ] || [ $SELECT == "ren!" ]; then
				echo "Enter Argument 2 (Optional)"
				read ARGUMENT2

			fi

			break

			done
		
		fi

		COMMAND $SELECT $ARGUMENT1 $ARGUMENT2

	done
}

if [ -z "$1" ]; then
LOOPING

else
COMMAND $1 $2 $3
fi

exec bash
